// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package generated

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (name, email, phonenumber, address, password)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, email, phonenumber, address, password
`

type CreateCustomerParams struct {
	Name        *string `json:"name"`
	Email       *string `json:"email"`
	Phonenumber *string `json:"phonenumber"`
	Address     *string `json:"address"`
	Password    *string `json:"password"`
}

type CreateCustomerRow struct {
	ID          int32   `json:"id"`
	Name        *string `json:"name"`
	Email       *string `json:"email"`
	Phonenumber *string `json:"phonenumber"`
	Address     *string `json:"address"`
	Password    *string `json:"password"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (CreateCustomerRow, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Name,
		arg.Email,
		arg.Phonenumber,
		arg.Address,
		arg.Password,
	)
	var i CreateCustomerRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phonenumber,
		&i.Address,
		&i.Password,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customer WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getAllCustomers = `-- name: GetAllCustomers :many
SELECT id, name, email, password, phonenumber, address FROM customer ORDER BY name
`

func (q *Queries) GetAllCustomers(ctx context.Context) ([]Customer, error) {
	rows, err := q.db.Query(ctx, getAllCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Phonenumber,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomerByID = `-- name: GetCustomerByID :one
SELECT id, name, email, password, phonenumber, address FROM customer WHERE id = $1
`

func (q *Queries) GetCustomerByID(ctx context.Context, id int32) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomerByID, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Phonenumber,
		&i.Address,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :exec
UPDATE customer
SET 
    name = COALESCE($2, name),
    email = COALESCE($3, email),
    phonenumber = COALESCE($4, phonenumber),
    address = COALESCE($5, address),
    password = COALESCE($6, password)
WHERE id = $1
`

type UpdateCustomerParams struct {
	ID          int32   `json:"id"`
	Name        *string `json:"name"`
	Email       *string `json:"email"`
	Phonenumber *string `json:"phonenumber"`
	Address     *string `json:"address"`
	Password    *string `json:"password"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) error {
	_, err := q.db.Exec(ctx, updateCustomer,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phonenumber,
		arg.Address,
		arg.Password,
	)
	return err
}
